{"version":3,"sources":["Cell/index.js","GridRow/index.js","Grid/index.js","App.js","index.js"],"names":["getFontColor","value","getBackgroundColor","Cell","props","data","className","style","color","background","GridRow","cells","map","index","key","Grid","createGrid","grid","i","rows","push","j","columns","x","y","chosencell","row","Math","floor","random","col","getEmptyGrid","slide","array","arr","filter","val","missing","length","Array","fill","concat","combine","a","b","score","flip","reverse","rotate","newGrid","placeRandom","state","setState","doSlide","isGameOver","console","log","onKeyPressed","e","copiedGrid","JSON","stringify","flipped","rotated","window","event","keyCode","document","onkeydown","this","Component","App","setScore","newValue","bind","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2cab5735.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = (props) => {\r\n  let cell = () => {\r\n    if (props.data.value !== 0) {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          style={{\r\n            color: getFontColor(props.data.value),\r\n            background: getBackgroundColor(props.data.value),\r\n          }}\r\n        >\r\n          {\" \"}\r\n          {props.data.value}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          style={{\r\n            background: \"#cdc1b4\",\r\n          }}\r\n        ></div>\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nconst getFontColor = (value) => {\r\n  switch (value) {\r\n    case 2:\r\n    case 4:\r\n      return \"#776e65\";\r\n  }\r\n  return \"white\";\r\n};\r\n\r\nconst getBackgroundColor = (value) => {\r\n  switch (value) {\r\n    case 2:\r\n      return \"#EBDCD0\";\r\n    case 4:\r\n      return \"#E9DBBA\";\r\n    case 8:\r\n      return \"#E9A067\";\r\n    case 16:\r\n      return \"#F08151\";\r\n    case 32:\r\n      return \"#F2654F\";\r\n    case 64:\r\n      return \"#F1462C\";\r\n    case 128:\r\n      return \"#ecce72\";\r\n    case 256:\r\n      return \"#eccb61\";\r\n    case 512:\r\n      return \"#ecc750\";\r\n    case 1024:\r\n      return \"#ecc440\";\r\n    case 2048:\r\n      return \"#ecc12e\";\r\n    case 4096:\r\n      return \"#ef676c\";\r\n    case 8192:\r\n      return \"#ec4d58\";\r\n    case 16384:\r\n      return \"#e14339\";\r\n    case 32768:\r\n      return \"#71b4d5\";\r\n    case 65536:\r\n      return \"#5da0df\";\r\n    case 131072:\r\n      return \"#007cbe\";\r\n  }\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell\";\r\n\r\nconst GridRow = (props) => {\r\n   let cells = props.cells.map((data, index) => {\r\n    return <Cell key={index} data={data} />;\r\n  });\r\n // \r\n\r\n  return <div className=\"row\">{cells}</div>;\r\n};\r\n\r\nexport default GridRow;\r\n","import React, { Component } from \"react\";\r\nimport GridRow from \"../GridRow\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: this.createGrid(props),\r\n    };\r\n  }\r\n\r\n  createGrid = (props) => {\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < props.rows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        grid[i].push({\r\n          x: j,\r\n          y: i,\r\n          value: 0,\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      let chosencell;\r\n      do {\r\n        let row = Math.floor(Math.random() * props.rows);\r\n        let col = Math.floor(Math.random() * props.columns);\r\n        chosencell = grid[row][col];\r\n      } while (chosencell.value > 0);\r\n\r\n      if (chosencell.value === 0) {\r\n        chosencell.value = Math.floor(Math.random() * (2 - 1 + 1) + 1) * 2;\r\n      }\r\n    }\r\n\r\n    return grid;\r\n  };\r\n\r\n  getEmptyGrid = () => {\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < this.props.rows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < this.props.columns; j++) {\r\n        grid[i].push({\r\n          x: j,\r\n          y: i,\r\n          value: 0,\r\n        });\r\n      }\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.onkeydown = this.onKeyPressed;\r\n  }\r\n\r\n  slide = (row) => {\r\n    let array = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      array[i] = row[i].value;\r\n    }\r\n    let arr = array.filter((val) => val);\r\n    let missing = 4 - arr.length;\r\n    let zeros = Array(missing).fill(0);\r\n    arr = zeros.concat(arr);\r\n    for (let i = 0; i < 4; i++) {\r\n      row[i].value = arr[i];\r\n    }\r\n\r\n    return row;\r\n  };\r\n\r\n  combine = (row) => {\r\n    for (let i = 3; i >= 1; i--) {\r\n      let a = row[i].value;\r\n      let b = row[i - 1].value;\r\n      if (a === b) {\r\n        row[i].value = a + b;\r\n        this.props.score(row[i].value);\r\n        row[i - 1].value = 0;\r\n      }\r\n    }\r\n    return row;\r\n  };\r\n\r\n  flip = (grid) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      grid[i].reverse();\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  rotate = (grid) => {\r\n    let newGrid = this.getEmptyGrid();\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        newGrid[i][j] = grid[j][i];\r\n      }\r\n    }\r\n    return newGrid;\r\n  };\r\n\r\n  placeRandom = () => {\r\n    let grid = this.state.rows;\r\n    let row, col;\r\n    let chosencell;\r\n    do {\r\n      row = Math.floor(Math.random() * this.props.rows);\r\n      col = Math.floor(Math.random() * this.props.columns);\r\n      chosencell = grid[row][col];\r\n    } while (chosencell.value > 0);\r\n\r\n    if (chosencell.value === 0) {\r\n      chosencell.value = Math.floor(Math.random() * (2 - 1 + 1) + 1) * 2;\r\n    }\r\n    grid[row][col] = chosencell;\r\n    this.setState({ rows: grid });\r\n  };\r\n\r\n  doSlide = (grid) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      grid[i] = this.slide(grid[i]);\r\n      grid[i] = this.combine(grid[i]);\r\n      grid[i] = this.slide(grid[i]);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  isGameOver = () => {\r\n    let grid = this.state.rows;\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        if (grid[i][j].value == 0) {\r\n          return;\r\n        }\r\n        if (i !== 3 && grid[i][j].value === grid[i + 1][j].value) {\r\n          return;\r\n        }\r\n        if (j !== 3 && grid[i][j].value === grid[i][j + 1].value) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    console.log(\"Game over!!!\");\r\n  };\r\n\r\n  onKeyPressed = (e) => {\r\n    let grid = this.state.rows;\r\n    let copiedGrid = JSON.stringify(grid);\r\n    let flipped = false;\r\n    let rotated = false;\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 39:\r\n      case 68:\r\n      case 99:\r\n        //RIGHT\r\n        grid = this.doSlide(grid);\r\n        break;\r\n      case 37:\r\n      case 65:\r\n      case 97:\r\n        //LEFT\r\n        grid = this.flip(grid);\r\n        grid = this.doSlide(grid);\r\n\r\n        flipped = true;\r\n        break;\r\n      case 40:\r\n      case 83:\r\n      case 98:\r\n        //DOWN\r\n        grid = this.rotate(grid);\r\n        grid = this.doSlide(grid);\r\n\r\n        rotated = true;\r\n        break;\r\n      case 38:\r\n      case 87:\r\n      case 101:\r\n        //UP\r\n        grid = this.rotate(grid);\r\n        grid = this.flip(grid);\r\n\r\n        grid = this.doSlide(grid);\r\n\r\n        rotated = true;\r\n        flipped = true;\r\n        break;\r\n    }\r\n\r\n    if (flipped) {\r\n      grid = this.flip(grid);\r\n    }\r\n    if (rotated) {\r\n      grid = this.rotate(grid);\r\n      grid = this.rotate(grid);\r\n      grid = this.rotate(grid);\r\n    }\r\n    this.setState({ rows: grid });\r\n\r\n    if (JSON.stringify(grid) !== copiedGrid) {\r\n      this.placeRandom();\r\n    }\r\n    this.isGameOver();\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.rows.map((row, index) => {\r\n      return <GridRow cells={row} key={index} />;\r\n    });\r\n    return <div className=\"grid\">{rows}</div>;\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\nimport Grid from \"../../2048game/src/Grid\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      rows: 4,\n      columns: 4,\n      score: 0,\n    };\n  }\n\n  setScore = (value) => {\n    let newValue = this.state.score + value;\n    this.setState({ score: newValue });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"grid\">\n          <Grid\n            score={this.setScore.bind(this)}\n            rows={this.state.rows}\n            columns={this.state.columns}\n          />\n        </div>\n        <div className=\"score\">\n          <p>{this.state.score} </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}