{"version":3,"sources":["Cell/index.js","GridRow/index.js","Grid/index.js","App.js","index.js"],"names":["getFontColor","value","getBackgroundColor","Cell","props","className","style","color","data","background","GridRow","cells","map","index","key","Grid","reset","setState","rows","createGrid","status","grid","i","push","j","columns","x","y","chosencell","row","Math","floor","random","col","getEmptyGrid","slide","array","arr","filter","val","missing","length","Array","fill","concat","combine","a","b","score","flip","reverse","rotate","newGrid","placeRandom","state","doSlide","isGameOver","gameOver","isGameWon","gameWon","onKeyPressed","e","copiedGrid","JSON","stringify","flipped","rotated","window","event","keyCode","document","onkeydown","this","Component","App","setScore","newValue","console","log","resetGame","gridRef","current","createRef","id","onClick","ref","bind","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.385cb99c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cell = (props) => {\r\n  let cell = () => {\r\n    return (\r\n      <div\r\n        className=\"cell\"\r\n        style={{\r\n          color: getFontColor(props.data.value),\r\n          background: getBackgroundColor(props.data.value),\r\n        }}\r\n      >\r\n        {\" \"}\r\n        {props.data.value}\r\n      </div>\r\n    );\r\n  };\r\n  return cell();\r\n};\r\n\r\nconst getFontColor = (value) => {\r\n  switch (value) {\r\n    case 0:\r\n      return \"#ffffff00\";\r\n    case 2:\r\n    case 4:\r\n      return \"#776e65\";\r\n    default:\r\n      break;\r\n  }\r\n  return \"white\";\r\n};\r\n\r\nconst getBackgroundColor = (value) => {\r\n  switch (value) {\r\n    case 0:\r\n      return \"#cdc1b4\";\r\n    case 2:\r\n      return \"#EBDCD0\";\r\n    case 4:\r\n      return \"#E9DBBA\";\r\n    case 8:\r\n      return \"#E9A067\";\r\n    case 16:\r\n      return \"#F08151\";\r\n    case 32:\r\n      return \"#F2654F\";\r\n    case 64:\r\n      return \"#F1462C\";\r\n    case 128:\r\n      return \"#ecce72\";\r\n    case 256:\r\n      return \"#eccb61\";\r\n    case 512:\r\n      return \"#ecc750\";\r\n    case 1024:\r\n      return \"#ecc440\";\r\n    case 2048:\r\n      return \"#ecc12e\";\r\n    case 4096:\r\n      return \"#ef676c\";\r\n    case 8192:\r\n      return \"#ec4d58\";\r\n    case 16384:\r\n      return \"#e14339\";\r\n    case 32768:\r\n      return \"#71b4d5\";\r\n    case 65536:\r\n      return \"#5da0df\";\r\n    case 131072:\r\n      return \"#007cbe\";\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell\";\r\n\r\nconst GridRow = (props) => {\r\n   let cells = props.cells.map((data, index) => {\r\n    return <Cell key={index} data={data} />;\r\n  });\r\n // \r\n\r\n  return <div className=\"row\">{cells}</div>;\r\n};\r\n\r\nexport default GridRow;\r\n","import React, { Component } from \"react\";\r\nimport GridRow from \"../GridRow\";\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rows: this.createGrid(props),\r\n      status: \"active\",\r\n    };\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({ rows: this.createGrid(this.props), status: \"active\" });\r\n  };\r\n\r\n  createGrid = (props) => {\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < props.rows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        grid[i].push({\r\n          x: j,\r\n          y: i,\r\n          value: 0,\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      let chosencell;\r\n      do {\r\n        let row = Math.floor(Math.random() * props.rows);\r\n        let col = Math.floor(Math.random() * props.columns);\r\n        chosencell = grid[row][col];\r\n      } while (chosencell.value > 0);\r\n\r\n      if (chosencell.value === 0) {\r\n        chosencell.value = Math.floor(Math.random() * (2 - 1 + 1) + 1) * 2;\r\n      }\r\n    }\r\n\r\n    return grid;\r\n  };\r\n\r\n  getEmptyGrid = () => {\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < this.props.rows; i++) {\r\n      grid.push([]);\r\n      for (let j = 0; j < this.props.columns; j++) {\r\n        grid[i].push({\r\n          x: j,\r\n          y: i,\r\n          value: 0,\r\n        });\r\n      }\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.onkeydown = this.onKeyPressed;\r\n  }\r\n\r\n  slide = (row) => {\r\n    let array = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      array[i] = row[i].value;\r\n    }\r\n    let arr = array.filter((val) => val);\r\n    let missing = 4 - arr.length;\r\n    let zeros = Array(missing).fill(0);\r\n    arr = zeros.concat(arr);\r\n    for (let i = 0; i < 4; i++) {\r\n      row[i].value = arr[i];\r\n    }\r\n\r\n    return row;\r\n  };\r\n\r\n  combine = (row) => {\r\n    for (let i = 3; i >= 1; i--) {\r\n      let a = row[i].value;\r\n      let b = row[i - 1].value;\r\n      if (a === b) {\r\n        row[i].value = a + b;\r\n        this.props.score(row[i].value);\r\n        row[i - 1].value = 0;\r\n      }\r\n    }\r\n    return row;\r\n  };\r\n\r\n  flip = (grid) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      grid[i].reverse();\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  rotate = (grid) => {\r\n    let newGrid = this.getEmptyGrid();\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        newGrid[i][j] = grid[j][i];\r\n      }\r\n    }\r\n    return newGrid;\r\n  };\r\n\r\n  placeRandom = () => {\r\n    let grid = this.state.rows;\r\n    let row, col;\r\n    let chosencell;\r\n    do {\r\n      row = Math.floor(Math.random() * this.props.rows);\r\n      col = Math.floor(Math.random() * this.props.columns);\r\n      chosencell = grid[row][col];\r\n    } while (chosencell.value > 0);\r\n\r\n    if (chosencell.value === 0) {\r\n      chosencell.value = Math.floor(Math.random() * (2 - 1 + 1) + 1) * 2;\r\n    }\r\n    grid[row][col] = chosencell;\r\n    this.setState({ rows: grid });\r\n  };\r\n\r\n  doSlide = (grid) => {\r\n    for (let i = 0; i < 4; i++) {\r\n      grid[i] = this.slide(grid[i]);\r\n      grid[i] = this.combine(grid[i]);\r\n      grid[i] = this.slide(grid[i]);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  isGameOver = () => {\r\n    let grid = this.state.rows;\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        if (grid[i][j].value === 0) {\r\n          return;\r\n        }\r\n        if (i !== 3 && grid[i][j].value === grid[i + 1][j].value) {\r\n          return;\r\n        }\r\n        if (j !== 3 && grid[i][j].value === grid[i][j + 1].value) {\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    this.props.gameOver();\r\n  };\r\n\r\n  isGameWon = () => {\r\n    let grid = this.state.rows;\r\n    for (let i = 0; i < 4; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        if (this.state.status === \"active\") {\r\n          if (grid[i][j].value === 2048) {\r\n            this.props.gameWon();\r\n            this.setState({ status: \"endless\" });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  };\r\n\r\n  onKeyPressed = (e) => {\r\n    let grid = this.state.rows;\r\n    let copiedGrid = JSON.stringify(grid);\r\n    let flipped = false;\r\n    let rotated = false;\r\n    e = e || window.event;\r\n    switch (e.keyCode) {\r\n      case 39:\r\n      case 68:\r\n      case 99:\r\n        //RIGHT\r\n        grid = this.doSlide(grid);\r\n        break;\r\n      case 37:\r\n      case 65:\r\n      case 97:\r\n        //LEFT\r\n        grid = this.flip(grid);\r\n        grid = this.doSlide(grid);\r\n\r\n        flipped = true;\r\n        break;\r\n      case 40:\r\n      case 83:\r\n      case 98:\r\n        //DOWN\r\n        grid = this.rotate(grid);\r\n        grid = this.doSlide(grid);\r\n\r\n        rotated = true;\r\n        break;\r\n      case 38:\r\n      case 87:\r\n      case 101:\r\n        //UP\r\n        grid = this.rotate(grid);\r\n        grid = this.flip(grid);\r\n\r\n        grid = this.doSlide(grid);\r\n\r\n        rotated = true;\r\n        flipped = true;\r\n        break;\r\n        default:\r\n          break;\r\n    }\r\n\r\n    if (flipped) {\r\n      grid = this.flip(grid);\r\n    }\r\n    if (rotated) {\r\n      grid = this.rotate(grid);\r\n      grid = this.rotate(grid);\r\n      grid = this.rotate(grid);\r\n    }\r\n    this.setState({ rows: grid });\r\n\r\n    if (JSON.stringify(grid) !== copiedGrid) {\r\n      this.placeRandom();\r\n    }\r\n    this.isGameOver();\r\n    this.isGameWon();\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.rows.map((row, index) => {\r\n      return <GridRow cells={row} key={index} />;\r\n    });\r\n    return <div className=\"grid\">{rows}</div>;\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component, createRef } from \"react\";\nimport Grid from \"../../2048game/src/Grid\";\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      rows: 4,\n      columns: 4,\n      score: 0,\n    };\n    this.gridRef = createRef();\n  }\n\n  setScore = (value) => {\n    let newValue = this.state.score + value;\n    this.setState({ score: newValue });\n  };\n\n  gameOver = () => {\n    console.log(\"Game over\");\n    //Display stuff\n  };\n\n  gameWon = () => {\n    console.log(\"Won\");\n    //Display stuff\n  };\n\n  resetGame = () => {\n    this.gridRef.current.reset();\n    this.setState({ score: 0 });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <div className=\"score\">\n            <p id=\"scoreTitle\">Score</p>\n            <p id=\"scoreNum\">{this.state.score} </p>\n          </div>\n          <div className=\"newGame\">\n            <button id=\"newGameButton\" onClick={this.resetGame}>\n              New game\n            </button>\n          </div>\n        </div>\n        <div>\n          <Grid\n            ref={this.gridRef}\n            score={this.setScore.bind(this)}\n            gameOver={this.gameOver.bind(this)}\n            gameWon={this.gameWon.bind(this)}\n            rows={this.state.rows}\n            columns={this.state.columns}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n/**/\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}